Vitality, based on Mac EVE Tools
================================

This project is licenced under the GNU GPL v3.

Building:

Requires Snow Leopard and Xcode 3.2
It can be made to work on Leopard 10.5 with a little effort.

The "Documentation" build target generates HTML documentation for
Vitality's classes; the documentation is added to Xcode's Documentation
and API Reference, and is also available in the Quick Help inspector.
Building the documentation requires [appledoc][ad], which can be
installed using [Homebrew][hb] (`brew install appledoc`) or downloaded from that
project's Github [releases][adr] page.

**N.B.: As of April 2014, appledoc does not build using the latest
version of XCode; if the HTML documentation is desired, install appledoc
using the binary release.**

[ad]: https://github.com/tomaz/appledoc/
[adr]: https://github.com/tomaz/appledoc/releases/
[hb]: http://brew.sh/

Vitality uses Sparkle to manage updates and can be found here: http://sparkle.andymatuschak.org/

Quasi design document:

The Private/MainController.m file is where the execution starts.
first in init, then awakeFromNib will be called, then appIsActive.
After that the program is up and running and ready for use.

Core:
	Core functionality, the user interface calls these classes to do stuff.
  	Heavy lifting such as calculating skill plans, managing character updates,
	database access and skill tree and stuff is all in here.
Core/Controls
	User interface elements
Core/Character
	The character object and related support classes.
Core/SQLite Database
	SQLite database implementation used for storing skill plans
Core/Skills
	Skill tree and Skill plan related data.
Views:
	The user interface is implemented in here, it will use the Core classes
	to perform its operations.
Windows:
	Pop up windows that display info about a skill, ship, certificate etc.
Private:
	Top level stuff that handles app startup / shutdown and manages the main
	window. 

In the dbscripts subdirectory there is a series of scripts that's used to
build the database that MET uses.  It's a modified and heavily cut down
version of the CCP database export, and is built by connecting to
a MySQL server that hosts the CCP DB export and fetching and processing
the required data.  See the dbscripts/README file for more info.

Signing
-------

Save the private key to dsa_priv.pem on the Desktop and export the build there. Signing seems to fail when using different directories.

cd ~/Desktop
ruby sign_update.rb vitality-X.X.X.zip dsa_priv.pem

